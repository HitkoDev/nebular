{"version":3,"file":"nebular-firebase-auth.mjs","sources":["../../../src/framework/firebase-auth/strategies/base/firebase-base.strategy.ts","../../../src/framework/firebase-auth/strategies/password/firebase-password-strategy.options.ts","../../../src/framework/firebase-auth/strategies/password/firebase-password.strategy.ts","../../../src/framework/firebase-auth/strategies/base/firebase-identity-provider-strategy.options.ts","../../../src/framework/firebase-auth/strategies/google/firebase-google.strategy.ts","../../../src/framework/firebase-auth/strategies/facebook/firebase-facebook.strategy.ts","../../../src/framework/firebase-auth/strategies/twitter/firebase-twitter.strategy.ts","../../../src/framework/firebase-auth/firebase-auth.module.ts","../../../src/framework/firebase-auth/public_api.ts","../../../src/framework/firebase-auth/nebular-firebase-auth.ts"],"sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { Observable, of as observableOf, from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { NbAuthResult, NbAuthIllegalTokenError, NbAuthStrategy } from '@nebular/auth';\n\nimport firebase from 'firebase/compat/app';\nimport UserCredential = firebase.auth.UserCredential;\n\n@Injectable()\nexport abstract class NbFirebaseBaseStrategy extends NbAuthStrategy {\n  constructor(protected afAuth: AngularFireAuth) {\n    super();\n  }\n\n  logout(): Observable<NbAuthResult> {\n    const module = 'logout';\n    return from(this.afAuth.signOut()).pipe(\n      map(() => {\n        return new NbAuthResult(\n          true,\n          null,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption(`${module}.defaultMessages`),\n        );\n      }),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  register(data?: any): Observable<NbAuthResult> {\n    throw new Error(`'register' is not supported by '${this.constructor.name}', use 'authenticate'.`);\n  }\n\n  requestPassword(data?: any): Observable<NbAuthResult> {\n    throw new Error(`'requestPassword' is not supported by '${this.constructor.name}', use 'authenticate'.`);\n  }\n\n  resetPassword(data: any = {}): Observable<NbAuthResult> {\n    throw new Error(`'resetPassword' is not supported by '${this.constructor.name}', use 'authenticate'.`);\n  }\n\n  refreshToken(data: any = {}): Observable<NbAuthResult> {\n    throw new Error(`'refreshToken' is not supported by '${this.constructor.name}', use 'authenticate'.`);\n  }\n\n  protected processFailure(error: any, module: string): Observable<NbAuthResult> {\n    const errorMessages = [];\n\n    if (error instanceof NbAuthIllegalTokenError) {\n      errorMessages.push(error.message);\n    } else {\n      errorMessages.push(this.getOption('errors.getter')(module, error, this.options));\n    }\n\n    return observableOf(\n      new NbAuthResult(false, error, this.getOption(`${module}.redirect.failure`), errorMessages, []),\n    );\n  }\n\n  protected processSuccess(res: UserCredential | null, module: string): Observable<NbAuthResult> {\n    return this.afAuth.idToken.pipe(\n      map((token) => {\n        return new NbAuthResult(\n          true,\n          res,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption('messages.getter')(module, res, this.options),\n          this.createToken(token),\n        );\n      }),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  getDeepFromObject,\n  NbAuthJWTToken,\n  NbAuthStrategyOptions,\n  NbPasswordStrategyMessage,\n  NbPasswordStrategyModule,\n  NbStrategyToken,\n} from '@nebular/auth';\n\nexport class NbFirebasePasswordStrategyOptions extends NbAuthStrategyOptions {\n  token?: NbStrategyToken = {\n    class: NbAuthJWTToken,\n  };\n  register?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully registered.'],\n  };\n  login?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Login/Email combination is not correct, please try again.'],\n    defaultMessages: ['You have been successfully logged in.'],\n  };\n  logout?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully logged out.'],\n  };\n  refreshToken?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: null,\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your token has been successfully refreshed.'],\n  };\n  requestPassword?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Reset password instructions have been sent to your email.'],\n  };\n  resetPassword?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['Your password has been successfully changed.'],\n  };\n  errors?: NbPasswordStrategyMessage = {\n    key: 'message',\n    getter: (module: string, res, options: NbFirebasePasswordStrategyOptions) => getDeepFromObject(\n      res,\n      options.errors.key,\n      options[module].defaultErrors,\n    ),\n  };\n  messages?: NbPasswordStrategyMessage = {\n    key: 'messages',\n    getter: (module: string, res, options: NbFirebasePasswordStrategyOptions) => getDeepFromObject(\n      res.body,\n      options.messages.key,\n      options[module].defaultMessages,\n    ),\n  };\n}\n\n// eslint-disable-next-line max-len\nexport const firebasePasswordStrategyOptions: NbFirebasePasswordStrategyOptions = new NbFirebasePasswordStrategyOptions();\n","/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport firebase from 'firebase/compat/app';\nimport { Observable, of as observableOf, from } from 'rxjs';\nimport { catchError, map, switchMap, take } from 'rxjs/operators';\nimport { NbAuthStrategyOptions, NbAuthStrategyClass, NbAuthResult } from '@nebular/auth';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport {\n  firebasePasswordStrategyOptions,\n  NbFirebasePasswordStrategyOptions,\n} from './firebase-password-strategy.options';\n\n@Injectable()\nexport class NbFirebasePasswordStrategy extends NbFirebaseBaseStrategy {\n  protected defaultOptions: NbFirebasePasswordStrategyOptions = firebasePasswordStrategyOptions;\n\n  static setup(options: NbFirebasePasswordStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebasePasswordStrategy, options];\n  }\n\n  authenticate({ email, password }: any): Observable<NbAuthResult> {\n    const module = 'login';\n    return from(this.afAuth.signInWithEmailAndPassword(email, password)).pipe(\n      switchMap((res) => this.processSuccess(res, module)),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  refreshToken(data?: any): Observable<NbAuthResult> {\n    const module = 'refreshToken';\n    return this.afAuth.authState.pipe(\n      take(1),\n      switchMap((user) => {\n        if (user == null) {\n          return observableOf(\n            new NbAuthResult(false, null, this.getOption(`${module}.redirect.failure`), [\n              \"There is no logged in user so refresh of id token isn't possible\",\n            ]),\n          );\n        }\n        return this.refreshIdToken(user, module);\n      }),\n    );\n  }\n\n  register({ email, password }: any): Observable<NbAuthResult> {\n    const module = 'register';\n    return from(this.afAuth.createUserWithEmailAndPassword(email, password)).pipe(\n      switchMap((res) => this.processSuccess(res, module)),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  requestPassword({ email }: any): Observable<NbAuthResult> {\n    const module = 'requestPassword';\n    return from(this.afAuth.sendPasswordResetEmail(email)).pipe(\n      map(() => {\n        return new NbAuthResult(\n          true,\n          null,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption(`${module}.defaultMessages`),\n        );\n      }),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  resetPassword({ code, password }): Observable<NbAuthResult> {\n    const module = 'resetPassword';\n    return from(this.afAuth.confirmPasswordReset(code, password)).pipe(\n      map(() => {\n        return new NbAuthResult(\n          true,\n          null,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption(`${module}.defaultMessages`),\n        );\n      }),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  protected updatePassword(user, password, module) {\n    return from(user.updatePassword(password)).pipe(\n      map((token) => {\n        return new NbAuthResult(\n          true,\n          null,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption(`${module}.defaultMessages`),\n          this.createToken(token),\n        );\n      }),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n\n  protected refreshIdToken(user: firebase.User, module): Observable<NbAuthResult> {\n    return from(user.getIdToken(true)).pipe(\n      map((token) => {\n        return new NbAuthResult(\n          true,\n          null,\n          this.getOption(`${module}.redirect.success`),\n          [],\n          this.getOption(`${module}.defaultMessages`),\n          this.createToken(token),\n        );\n      }),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  NbPasswordStrategyMessage,\n  NbPasswordStrategyModule,\n  NbAuthJWTToken,\n  NbAuthStrategyOptions,\n  NbStrategyToken,\n} from '@nebular/auth';\n\nexport class NbFirebaseIdentityProviderStrategyOptions extends NbAuthStrategyOptions {\n  token?: NbStrategyToken = {\n    class: NbAuthJWTToken,\n  };\n  logout?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully logged out.'],\n  };\n  authenticate?: boolean | NbPasswordStrategyModule = {\n    redirect: {\n      success: '/',\n      failure: null,\n    },\n    defaultErrors: ['Something went wrong, please try again.'],\n    defaultMessages: ['You have been successfully authenticated.'],\n  };\n  errors?: NbPasswordStrategyMessage = {\n    key: 'message',\n    getter: (module: string, res, options: NbFirebaseIdentityProviderStrategyOptions) => options[module].defaultErrors,\n  };\n  messages?: NbPasswordStrategyMessage = {\n    key: 'message',\n    getter: (module: string, res, options: NbFirebaseIdentityProviderStrategyOptions) => {\n      return options[module].defaultMessages;\n    },\n  };\n  scopes?: string[] = [];\n  customParameters?: { [key: string]: string } = {};\n};\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { NbAuthStrategyClass, NbAuthResult, NbAuthStrategyOptions } from '@nebular/auth';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport { NbFirebaseIdentityProviderStrategyOptions } from '../base/firebase-identity-provider-strategy.options';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\n@Injectable()\nexport class NbFirebaseGoogleStrategy extends NbFirebaseBaseStrategy {\n  protected defaultOptions: NbFirebaseIdentityProviderStrategyOptions = new NbFirebaseIdentityProviderStrategyOptions();\n\n  static setup(options: NbFirebaseIdentityProviderStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebaseGoogleStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'authenticate';\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const scopes = this.getOption('scopes');\n    scopes.forEach((scope) => provider.addScope(scope));\n    provider.setCustomParameters(this.getOption('customParameters'));\n\n    return from(this.afAuth.signInWithPopup(provider)).pipe(\n      switchMap((res) => this.processSuccess(res, module)),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { NbAuthResult, NbAuthStrategyClass, NbAuthStrategyOptions } from '@nebular/auth';\nimport { from, Observable } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport { NbFirebaseIdentityProviderStrategyOptions } from '../base/firebase-identity-provider-strategy.options';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\n@Injectable()\nexport class NbFirebaseFacebookStrategy extends NbFirebaseBaseStrategy {\n  protected defaultOptions: NbFirebaseIdentityProviderStrategyOptions = new NbFirebaseIdentityProviderStrategyOptions();\n\n  static setup(options: NbFirebaseIdentityProviderStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebaseFacebookStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'authenticate';\n    const provider = new firebase.auth.FacebookAuthProvider();\n    const scopes = this.getOption('scopes');\n    scopes.forEach((scope) => provider.addScope(scope));\n    provider.setCustomParameters(this.getOption('customParameters'));\n\n    return from(this.afAuth.signInWithPopup(provider)).pipe(\n      switchMap((res) => this.processSuccess(res, module)),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, from } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { NbAuthStrategyClass, NbAuthResult, NbAuthStrategyOptions } from '@nebular/auth';\n\nimport { NbFirebaseBaseStrategy } from '../base/firebase-base.strategy';\nimport { NbFirebaseIdentityProviderStrategyOptions } from '../base/firebase-identity-provider-strategy.options';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\n\n@Injectable()\nexport class NbFirebaseTwitteStrategy extends NbFirebaseBaseStrategy {\n  protected defaultOptions: NbFirebaseIdentityProviderStrategyOptions = new NbFirebaseIdentityProviderStrategyOptions();\n\n  static setup(options: NbFirebaseIdentityProviderStrategyOptions): [NbAuthStrategyClass, NbAuthStrategyOptions] {\n    return [NbFirebaseTwitteStrategy, options];\n  }\n\n  authenticate(data?: any): Observable<NbAuthResult> {\n    const module = 'authenticate';\n    const provider = new firebase.auth.TwitterAuthProvider();\n    provider.setCustomParameters(this.getOption('customParameters'));\n\n    return from(this.afAuth.signInWithPopup(provider)).pipe(\n      switchMap((res) => this.processSuccess(res, module)),\n      catchError((error) => this.processFailure(error, module)),\n    );\n  }\n}\n","/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nimport { NgModule } from '@angular/core';\n\nimport { NbFirebasePasswordStrategy } from './strategies/password/firebase-password.strategy';\nimport { NbFirebaseGoogleStrategy } from './strategies/google/firebase-google.strategy';\nimport { NbFirebaseFacebookStrategy } from './strategies/facebook/firebase-facebook.strategy';\nimport { NbFirebaseTwitteStrategy } from './strategies/twitter/firebase-twitter.strategy';\n\n\n@NgModule({\n  providers: [\n    NbFirebasePasswordStrategy,\n    NbFirebaseGoogleStrategy,\n    NbFirebaseFacebookStrategy,\n    NbFirebaseTwitteStrategy,\n  ],\n})\nexport class NbFirebaseAuthModule { }\n","/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n\nexport * from\t'./strategies/base/firebase-base.strategy';\nexport * from './strategies/password/firebase-password.strategy';\nexport * from './strategies/password/firebase-password-strategy.options';\nexport * from './strategies/base/firebase-identity-provider-strategy.options';\nexport * from './strategies/google/firebase-google.strategy';\nexport * from './strategies/facebook/firebase-facebook.strategy';\nexport * from './strategies/twitter/firebase-twitter.strategy';\nexport * from './firebase-auth.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["observableOf"],"mappings":"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"}